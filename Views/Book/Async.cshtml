<!DOCTYPE html>
<html lang="et">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>10. peatükk: Asünkroonne programmeerimine</title>
</head>
<body>
    <h1>10. peatükk: Asünkroonne programmeerimine</h1>
    <p>Selles peatükis uurime asünkroonse programmeerimise võimalusi C#-is. Asünkroonsus aitab rakendustel töötada sujuvalt, ilma kasutajaliidese või muude toimingute blokeerimiseta.</p>

    <h2>10.1. Mis on asünkroonne programmeerimine?</h2>
    <p>Asünkroonne programmeerimine võimaldab teostada toiminguid taustal, vabastades rakenduse põhivoo muudeks ülesanneteks.</p>
    <p>C# toetab asünkroonsust märksõnadega <code>async</code> ja <code>await</code>.</p>

    <h2>10.2. Asünkroonse meetodi loomine</h2>
    <p>Asünkroonse meetodi määratlemiseks lisage märksõna <code>async</code> ja kasutage <code>await</code> toimingute jaoks, mis võtavad aega.</p>

    <h3>Lihtne näide</h3>
    <pre>
    <code>
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        Console.WriteLine("Alustan ülesannet...");
        await DoWorkAsync();
        Console.WriteLine("Ülesanne lõpetatud!");
    }

    public static async Task DoWorkAsync()
    {
        await Task.Delay(2000); // Simuleerib 2-sekundilist viivitust
        Console.WriteLine("Töö tehtud!");
    }
}
        </code>
    </pre>
    <p>
        Väljund:<br>
        <code>Alustan ülesannet...</code><br>
        <code>Töö tehtud!</code><br>
        <code>Ülesanne lõpetatud!</code>
    </p>

    <h2>10.3. Asünkroonsete meetodite ahel</h2>
    <p>Asünkroonsed meetodid võivad kutsuda teisi asünkroonseid meetodeid.</p>

    <pre>
    <code>
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        Console.WriteLine("Alustan...");
        await FirstTaskAsync();
        Console.WriteLine("Kõik lõpetatud!");
    }

    public static async Task FirstTaskAsync()
    {
        Console.WriteLine("Esimene ülesanne algas...");
        await SecondTaskAsync();
        Console.WriteLine("Esimene ülesanne lõpetatud!");
    }

    public static async Task SecondTaskAsync()
    {
        Console.WriteLine("Teine ülesanne algas...");
        await Task.Delay(1000);
        Console.WriteLine("Teine ülesanne lõpetatud!");
    }
}
        </code>
    </pre>

    <h2>10.4. Asünkroonsus ja andmevoog</h2>
    <p>Andmeid saab lugeda ja kirjutada asünkroonselt, kasutades näiteks <code>StreamReader</code> ja <code>StreamWriter</code>.</p>

    <h3>Asünkroonne faili lugemine</h3>
    <pre>
    <code>
using System;
using System.IO;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        string content = await ReadFileAsync("example.txt");
        Console.WriteLine(content);
    }

    public static async Task<string> ReadFileAsync(string filePath)
    {
        using (StreamReader reader = new StreamReader(filePath))
        {
            return await reader.ReadToEndAsync();
        }
    }
}
        </code>
    </pre>

    <h3>Asünkroonne faili kirjutamine</h3>
    <pre>
    <code>
using System;
using System.IO;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        await WriteFileAsync("example.txt", "Tere, maailm!");
    }

    public static async Task WriteFileAsync(string filePath, string content)
    {
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            await writer.WriteAsync(content);
        }
    }
}
        </code>
    </pre>

    <h2>10.5. Vead ja erandite käsitlemine asünkroonsetes meetodites</h2>
    <p>Asünkroonsed meetodid võivad visata erandeid, mis tuleks käsitleda <code>try-catch</code>-plokkide abil.</p>

    <h3>Erandite käsitlemise näide</h3>
    <pre>
    <code>
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        try
        {
            await ThrowExceptionAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Viga: {ex.Message}");
        }
    }

    public static async Task ThrowExceptionAsync()
    {
        await Task.Delay(1000);
        throw new InvalidOperationException("Midagi läks valesti!");
    }
}
        </code>
    </pre>

    <h2>Harjutused</h2>
    <ol>
        <li><strong>Viivitus:</strong> Looge asünkroonne meetod, mis simuleerib 5-sekundilist viivitust ja kuvab selle lõpus teate.</li>
        <li><strong>Faili kirjutamine ja lugemine:</strong> Looge asünkroonsed meetodid, mis kirjutavad ja loevad tekstifaili.</li>
        <li><strong>Erandi käsitlemine:</strong> Looge asünkroonne meetod, mis viskab erandi, ja käsitlege see peamises meetodis.</li>
    </ol>

    <h2>Kokkuvõte</h2>
    <p>Selles peatükis õppisime tundma asünkroonse programmeerimise põhimõtteid C#-is. Need tehnikad võimaldavad luua sujuvalt töötavaid rakendusi, mis suudavad teha mitu toimingut paralleelselt. Järgmises peatükis uurime Windows Forms ja WPF kasutajaliidese loomist.</p>

    @if (Codie.Controllers.BookController.PreviosPage != "404")
    {
        <input type="button" value="Previos" onclick="window.location.href='@Codie.Controllers.BookController.PreviosPage'" />
    }
    @if (Codie.Controllers.BookController.NextPage != "404")
    {
        <input type="button" value="Next" onclick="window.location.href='@Codie.Controllers.BookController.NextPage'" />
    }
</body>
</html>
