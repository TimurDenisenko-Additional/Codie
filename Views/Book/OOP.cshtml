<!DOCTYPE html>
<html lang="et">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>4. peatükk: Objekti-orienteeritud programmeerimine (OOP) C#-is</title>
</head>
<body>
    <h1>4. peatükk: Objekti-orienteeritud programmeerimine (OOP) C#-is</h1>
    <p>Objekti-orienteeritud programmeerimine (OOP) on C# keskne kontseptsioon, mis võimaldab töötada andmete ja loogikaga objektide kaudu. Selles peatükis uurime klasside, objektide, päriluse, polümorfismi ja abstraktsiooni põhimõtteid.</p>

    <h2>4.1. Mis on klass ja objekt?</h2>
    <p><strong>Klass</strong> on andmete ja meetodite kogum, mis määratleb objekti struktuuri ja käitumise. <strong>Objekt</strong> on klassi instants ehk konkreetne näide.</p>

    <h3>Klassi loomine</h3>
    <pre>
    <code>
public class Car
{
    public string Brand;
    public string Model;
    public int Year;

    public void Drive()
    {
        Console.WriteLine($"{Brand} {Model} sõidab.");
    }
}
        </code>
    </pre>

    <h3>Objekti loomine</h3>
    <pre>
    <code>
Car myCar = new Car();
myCar.Brand = "Toyota";
myCar.Model = "Corolla";
myCar.Year = 2020;
myCar.Drive(); // Väljund: Toyota Corolla sõidab.
        </code>
    </pre>

    <h2>4.2. Konstruktorid</h2>
    <p><strong>Konstruktor</strong> on erimeetod, mis käivitatakse automaatselt, kui objekt luuakse. Seda kasutatakse tavaliselt algväärtuste seadistamiseks.</p>

    <h3>Konstruktori loomine</h3>
    <pre>
    <code>
public class Car
{
    public string Brand;
    public string Model;
    public int Year;

    public Car(string brand, string model, int year)
    {
        Brand = brand;
        Model = model;
        Year = year;
    }

    public void Drive()
    {
        Console.WriteLine($"{Brand} {Model} sõidab.");
    }
}
        </code>
    </pre>

    <h3>Objekti loomine konstruktoriga</h3>
    <pre>
    <code>
Car myCar = new Car("Toyota", "Corolla", 2020);
myCar.Drive(); // Väljund: Toyota Corolla sõidab.
        </code>
    </pre>

    <h2>4.3. Pärilus</h2>
    <p><strong>Pärilus</strong> võimaldab ühe klassi (alamklassi) pärida teise klassi (ülaklassi) omadused ja meetodid.</p>

    <h3>Päriluse näide</h3>
    <pre>
    <code>
public class Vehicle
{
    public string Brand;

    public void Honk()
    {
        Console.WriteLine("Piip-piip!");
    }
}

public class Car : Vehicle
{
    public string Model;

    public void Drive()
    {
        Console.WriteLine($"{Brand} {Model} sõidab.");
    }
}
        </code>
    </pre>
    <p>Objekti loomine ja kasutamine:</p>
    <pre>
    <code>
Car myCar = new Car();
myCar.Brand = "Toyota";
myCar.Model = "Corolla";
myCar.Honk(); // Väljund: Piip-piip!
myCar.Drive(); // Väljund: Toyota Corolla sõidab.
        </code>
    </pre>

    <h2>4.4. Polümorfism</h2>
    <p><strong>Polümorfism</strong> võimaldab üht tüüpi objekte kasutada mitmel viisil. See saavutatakse meetodite ülekirjutamise abil.</p>

    <h3>Polümorfismi näide</h3>
    <pre>
    <code>
public class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("Loom teeb häält.");
    }
}

public class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Koer ütleb: auh!");
    }
}

public class Cat : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Kass ütleb: mjäu!");
    }
}
        </code>
    </pre>
    <p>Kasutamine:</p>
    <pre>
    <code>
Animal myDog = new Dog();
Animal myCat = new Cat();
myDog.Speak(); // Väljund: Koer ütleb: auh!
myCat.Speak(); // Väljund: Kass ütleb: mjäu!
        </code>
    </pre>

    <h2>4.5. Abstraktsioon</h2>
    <p><strong>Abstraktsioon</strong> võimaldab luua klassi, millel on üldine struktuur, kuid konkreetne käitumine määratakse alamklassides.</p>

    <h3>Abstraktse klassi näide</h3>
    <pre>
    <code>
public abstract class Shape
{
    public abstract double GetArea();
}

public class Circle : Shape
{
    public double Radius;

    public Circle(double radius)
    {
        Radius = radius;
    }

    public override double GetArea()
    {
        return Math.PI * Radius * Radius;
    }
}

public class Rectangle : Shape
{
    public double Width;
    public double Height;

    public Rectangle(double width, double height)
    {
        Width = width;
        Height = height;
    }

    public override double GetArea()
    {
        return Width * Height;
    }
}
        </code>
    </pre>
    <p>Kasutamine:</p>
    <pre>
    <code>
Shape circle = new Circle(5);
Shape rectangle = new Rectangle(4, 6);
Console.WriteLine(circle.GetArea()); // Väljund: 78.54
Console.WriteLine(rectangle.GetArea()); // Väljund: 24
        </code>
    </pre>

    <h2>Harjutused</h2>
    <ol>
        <li><strong>Klass ja objekt:</strong> Looge klass "Raamat" väljadega "Pealkiri", "Autor" ja "Aasta". Lisage meetod, mis kuvab raamatu teabe.</li>
        <li><strong>Konstruktor:</strong> Lisage klassile "Raamat" konstruktor, mis määrab algväärtused väljadele.</li>
        <li><strong>Pärilus:</strong> Looge klass "E-Raamat", mis pärib klassi "Raamat" ja lisab välja "Failiformaat".</li>
        <li><strong>Polümorfism:</strong> Looge looma klass ja alamklassid, mis rakendavad erinevaid helisid, nagu koer ja kass.</li>
        <li><strong>Abstraktsioon:</strong> Looge abstraktne klass "Kujund" ja alamklassid "Kolmnurk" ja "Ruut", mis arvutavad pindala.</li>
    </ol>

    <h2>Kokkuvõte</h2>
    <p>Selles peatükis õppisime tundma OOP põhiprintsiipe: klasse, objekte, pärilust, polümorfismi ja abstraktsiooni. Need kontseptsioonid on C# programmeerimise aluseks ning aitavad luua modulaarseid ja laiendatavaid programme.</p>
    @if (Codie.Controllers.BookController.PreviosPage != "404")
    {
        <input type="button" value="Previos" onclick="window.location.href='@Codie.Controllers.BookController.PreviosPage'" />
    }
    @if (Codie.Controllers.BookController.NextPage != "404")
    {
        <input type="button" value="Next" onclick="window.location.href='@Codie.Controllers.BookController.NextPage'" />
    }
</body>
</html>
