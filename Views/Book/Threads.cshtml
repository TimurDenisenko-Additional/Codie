<!DOCTYPE html>
<html lang="et">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>15. peatükk: Mitu lõime ja paralleelne programmeerimine</title>
</head>
<body>
    <h1>15. peatükk: Mitu lõime ja paralleelne programmeerimine</h1>
    <p>Selles peatükis uurime, kuidas C#-is kasutada mitut lõime ja teostada paralleelset programmeerimist, et kiirendada arvutusi ja suurendada rakenduse jõudlust.</p>

    <h2>15.1. Mis on lõim?</h2>
    <p><strong>Lõim</strong> (thread) on programmi täitmise eraldiseisev voog. Mitu lõime võivad töötada paralleelselt, kasutades ära mitmetuumaliste protsessorite võimalusi.</p>

    <h3>Lihtne lõime näide</h3>
    <pre>
    <code>
using System;
using System.Threading;

public class Program
{
    public static void Main()
    {
        Thread thread = new Thread(PrintMessage);
        thread.Start();

        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine("Peamine lõim töötab...");
            Thread.Sleep(500);
        }
    }

    public static void PrintMessage()
    {
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine("Teine lõim töötab...");
            Thread.Sleep(500);
        }
    }
}
        </code>
    </pre>

    <h2>15.2. Task paralleelsus</h2>
    <p><strong>Task</strong> on kaasaegsem alternatiiv lõimedele. See võimaldab lihtsamat asünkroonset ja paralleelset programmeerimist.</p>

    <h3>Task näide</h3>
    <pre>
    <code>
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main()
    {
        Task task = Task.Run(() => PrintMessage());
        await task;

        Console.WriteLine("Peamine ülesanne lõpetatud.");
    }

    public static void PrintMessage()
    {
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine("Ülesanne töötab...");
            Task.Delay(500).Wait();
        }
    }
}
        </code>
    </pre>

    <h2>15.3. Paralleelne töötlemine</h2>
    <p>C# pakub paralleelseid tööriistu <code>Parallel</code> klassis, mis võimaldavad lihtsustada korduvate ülesannete töötlemist mitmel lõimel.</p>

    <h3>Parallel.For näide</h3>
    <pre>
    <code>
using System;
using System.Threading.Tasks;

public class Program
{
    public static void Main()
    {
        Parallel.For(0, 10, i =>
        {
            Console.WriteLine($"Indeks: {i}, Töötav lõim: {Task.CurrentId}");
            Task.Delay(500).Wait();
        });

        Console.WriteLine("Kõik tööd lõpetatud.");
    }
}
        </code>
    </pre>

    <h3>Parallel.ForEach näide</h3>
    <pre>
    <code>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public class Program
{
    public static void Main()
    {
        List<string> items = new List<string> { "Üks", "Kaks", "Kolm" };

        Parallel.ForEach(items, item =>
        {
            Console.WriteLine($"Töötan elemendiga: {item}");
            Task.Delay(500).Wait();
        });

        Console.WriteLine("Kõik elemendid töödeldud.");
    }
}
        </code>
    </pre>

    <h2>15.4. Lõimeohutus</h2>
    <p>Lõimeohutus on oluline, kui mitu lõime töötavad sama ressursiga. Probleemide vältimiseks kasutatakse lukke ja muid sünkroniseerimismehhanisme.</p>

    <h3>Lock näide</h3>
    <pre>
    <code>
using System;
using System.Threading;

public class Program
{
    private static object _lock = new object();
    private static int _counter = 0;

    public static void Main()
    {
        Thread t1 = new Thread(IncrementCounter);
        Thread t2 = new Thread(IncrementCounter);

        t1.Start();
        t2.Start();

        t1.Join();
        t2.Join();

        Console.WriteLine($"Lõplik loendur: {_counter}");
    }

    public static void IncrementCounter()
    {
        for (int i = 0; i < 1000; i++)
        {
            lock (_lock)
            {
                _counter++;
            }
        }
    }
}
        </code>
    </pre>

    <h2>Harjutused</h2>
    <ol>
        <li><strong>Lõimed:</strong> Looge programm, kus kaks lõime kirjutavad konsooli vaheldumisi erinevaid sõnumeid.</li>
        <li><strong>Parallel.For:</strong> Kasutage <code>Parallel.For</code>, et arvutada massiivi elementide ruut.</li>
        <li><strong>Lock:</strong> Looge programm, mis suurendab ühise ressursi väärtust mitme lõime abil, kasutades lukku.</li>
    </ol>

    <h2>Kokkuvõte</h2>
    <p>Selles peatükis õppisime tundma lõimede ja paralleelse programmeerimise põhimõtteid. Need tööriistad aitavad parandada rakenduse jõudlust, kuid nõuavad hoolikat planeerimist, et vältida lõimekonflikte ja muid vigu.</p>

    @if (Codie.Controllers.BookController.PreviosPage != "404")
    {
        <input type="button" value="Previos" onclick="window.location.href='@Codie.Controllers.BookController.PreviosPage'" />
    }
    @if (Codie.Controllers.BookController.NextPage != "404")
    {
        <input type="button" value="Next" onclick="window.location.href='@Codie.Controllers.BookController.NextPage'" />
    }
</body>
</html>
