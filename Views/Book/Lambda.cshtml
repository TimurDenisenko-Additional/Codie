<!DOCTYPE html>
<html lang="et">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>8. peatükk: Delegaadid, sündmused ja lambda-avaldised</title>
</head>
<body>
    <h1>8. peatükk: Delegaadid, sündmused ja lambda-avaldised</h1>
    <p>Selles peatükis uurime C# võimsaid omadusi: delegaate, sündmusi ja lambda-avaldisi. Need on olulised dünaamiliste ja paindlike programmide loomisel.</p>

    <h2>8.1. Delegaadid</h2>
    <p><strong>Delegaat</strong> on viide meetodile. Delegaat võimaldab koodil dünaamiliselt kutsuda meetodeid ilma nende nime otseselt määramata.</p>

    <h3>Delegaatide kasutamine</h3>
    <pre>
    <code>
public delegate void PrintMessage(string message);

public class Program
{
    public static void Main()
    {
        PrintMessage printer = PrintToConsole;
        printer("Tere, maailm!");
    }

    public static void PrintToConsole(string message)
    {
        Console.WriteLine(message);
    }
}
        </code>
    </pre>
    <p>Väljund: <code>Tere, maailm!</code></p>

    <h2>8.2. Multicast delegaadid</h2>
    <p>Delegaadid võivad viidata mitmele meetodile. Seda nimetatakse multicast-delegaadiks.</p>
    <pre>
    <code>
public delegate void PrintMessage(string message);

public class Program
{
    public static void Main()
    {
        PrintMessage printer = PrintToConsole;
        printer += PrintToFile;

        printer("Tere, maailm!");
    }

    public static void PrintToConsole(string message)
    {
        Console.WriteLine(message);
    }

    public static void PrintToFile(string message)
    {
        System.IO.File.WriteAllText("output.txt", message);
    }
}
        </code>
    </pre>

    <h2>8.3. Sündmused</h2>
    <p><strong>Sündmus</strong> on delegaat, mida kasutatakse sündmuse käsitlemiseks. See võimaldab ühel objektide komplektil teavitada teisi sündmuse toimumisest.</p>

    <h3>Sündmuse näide</h3>
    <pre>
    <code>
public class Publisher
{
    public event Action OnPublish;

    public void Publish()
    {
        Console.WriteLine("Avaldamine algas.");
        OnPublish?.Invoke();
    }
}

public class Subscriber
{
    public void OnEventHandler()
    {
        Console.WriteLine("Sündmus vastu võetud.");
    }
}

public class Program
{
    public static void Main()
    {
        Publisher publisher = new Publisher();
        Subscriber subscriber = new Subscriber();

        publisher.OnPublish += subscriber.OnEventHandler;
        publisher.Publish();
    }
}
        </code>
    </pre>
    <p>
        Väljund:<br>
        <code>Avaldamine algas.</code><br>
        <code>Sündmus vastu võetud.</code>
    </p>

    <h2>8.4. Lambda-avaldised</h2>
    <p><strong>Lambda-avaldis</strong> on lühike süntaks anonüümsete meetodite määratlemiseks. See on väga kasulik, kui meetod on lihtne ja seda kasutatakse ainult üks kord.</p>

    <h3>Lambda-avaldiste näide</h3>
    <pre>
    <code>
using System;
using System.Linq;

public class Program
{
    public static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 6 };
        var evenNumbers = numbers.Where(n => n % 2 == 0);

        foreach (int number in evenNumbers)
        {
            Console.WriteLine(number);
        }
    }
}
        </code>
    </pre>
    <p>Väljund: <code>2</code>, <code>4</code>, <code>6</code></p>

    <h2>8.5. Delegaatide, sündmuste ja lambda-avaldiste kombineerimine</h2>
    <p>Need kolm mehhanismi töötavad hästi koos, võimaldades luua keerukamaid ja dünaamilisemaid rakendusi.</p>

    <h3>Kombineeritud näide</h3>
    <pre>
    <code>
public class Publisher
{
    public event Action<string> OnPublish;

    public void Publish(string message)
    {
        OnPublish?.Invoke(message);
    }
}

public class Program
{
    public static void Main()
    {
        Publisher publisher = new Publisher();

        publisher.OnPublish += msg => Console.WriteLine($"Konsoolisõnum: {msg}");
        publisher.OnPublish += msg => System.IO.File.WriteAllText("output.txt", msg);

        publisher.Publish("Tere, maailm!");
    }
}
        </code>
    </pre>

    <h2>Harjutused</h2>
    <ol>
        <li><strong>Delegaat:</strong> Looge delegaat, mis kutsub meetodit, mis arvutab ja kuvab kahe arvu summa.</li>
        <li><strong>Sündmus:</strong> Looge sündmus, mis teavitab kasutajat, kui fail on salvestatud.</li>
        <li><strong>Lambda-avaldis:</strong> Kasutage lambda-avaldist, et filtreerida massiivist paarisarvud ja kuvada need.</li>
    </ol>

    <h2>Kokkuvõte</h2>
    <p>Selles peatükis õppisime tundma delegaate, sündmusi ja lambda-avaldisi. Need mehhanismid muudavad programmi dünaamiliseks ja paindlikuks ning võimaldavad luua keerukamaid andmetöötlusvooge.</p>

    @if (Codie.Controllers.BookController.PreviosPage != "404")
    {
        <input type="button" value="Previos" onclick="window.location.href='@Codie.Controllers.BookController.PreviosPage'" />
    }
    @if (Codie.Controllers.BookController.NextPage != "404")
    {
        <input type="button" value="Next" onclick="window.location.href='@Codie.Controllers.BookController.NextPage'" />
    }
</body>
</html>
