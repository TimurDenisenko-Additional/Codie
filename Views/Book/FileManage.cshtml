<!DOCTYPE html>
<html lang="et">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>9. peatükk: Töö failide ja voogudega</title>
</head>
<body>
    <h1>9. peatükk: Töö failide ja voogudega</h1>
    <p>Selles peatükis õpime, kuidas lugeda ja kirjutada faile ning kasutada voogusid andmete töötlemiseks C#-is. Failide ja voogude kasutamine on kriitiline, kui on vaja hallata väliseid ressursse, nagu tekstifailid või binäärandmed.</p>

    <h2>9.1. Failide lugemine ja kirjutamine</h2>
    <p>C# pakub lihtsaid meetodeid failide lugemiseks ja kirjutamiseks klassis <code>System.IO.File</code>.</p>

    <h3>Faili kirjutamine</h3>
    <pre>
    <code>
using System.IO;

File.WriteAllText("example.txt", "Tere, maailm!");
        </code>
    </pre>
    <p>Ülaltoodud kood loob faili nimega <code>example.txt</code> ja kirjutab sinna teksti "Tere, maailm!".</p>

    <h3>Faili lugemine</h3>
    <pre>
    <code>
string content = File.ReadAllText("example.txt");
Console.WriteLine(content); // Väljund: Tere, maailm!
        </code>
    </pre>

    <h2>9.2. Failide lugemine ja kirjutamine ridade kaupa</h2>
    <p>Klassid <code>File.ReadAllLines</code> ja <code>File.WriteAllLines</code> võimaldavad töötada ridade kaupa.</p>

    <h3>Kirjutamine ridade kaupa</h3>
    <pre>
    <code>
string[] lines = { "Esimene rida", "Teine rida", "Kolmas rida" };
File.WriteAllLines("lines.txt", lines);
        </code>
    </pre>

    <h3>Lugemine ridade kaupa</h3>
    <pre>
    <code>
string[] lines = File.ReadAllLines("lines.txt");
foreach (string line in lines)
{
    Console.WriteLine(line);
}
        </code>
    </pre>

    <h2>9.3. Voogudega töötamine</h2>
    <p>Kui on vaja hallata suuri andmehulki või töötada failidega juhuslikus järjekorras, kasutatakse vooge.</p>

    <h3>FileStream näide</h3>
    <pre>
    <code>
using System.IO;

using (FileStream fs = new FileStream("stream.txt", FileMode.Create))
{
    byte[] data = System.Text.Encoding.UTF8.GetBytes("Tere, voog!");
    fs.Write(data, 0, data.Length);
}

using (FileStream fs = new FileStream("stream.txt", FileMode.Open))
{
    byte[] buffer = new byte[fs.Length];
    fs.Read(buffer, 0, buffer.Length);
    string content = System.Text.Encoding.UTF8.GetString(buffer);
    Console.WriteLine(content); // Väljund: Tere, voog!
}
        </code>
    </pre>

    <h2>9.4. BinaryReader ja BinaryWriter</h2>
    <p>Need klassid on kasulikud binäärandmete lugemiseks ja kirjutamiseks.</p>

    <h3>BinaryWriter näide</h3>
    <pre>
    <code>
using (BinaryWriter writer = new BinaryWriter(File.Open("binary.dat", FileMode.Create)))
{
    writer.Write(123); // Kirjutab täisarvu
    writer.Write("Tere, maailm!"); // Kirjutab stringi
}
        </code>
    </pre>

    <h3>BinaryReader näide</h3>
    <pre>
    <code>
using (BinaryReader reader = new BinaryReader(File.Open("binary.dat", FileMode.Open)))
{
    int number = reader.ReadInt32();
    string text = reader.ReadString();
    Console.WriteLine($"Number: {number}, Text: {text}");
}
        </code>
    </pre>

    <h2>9.5. StreamReader ja StreamWriter</h2>
    <p>Kui töötate tekstifailidega, on <code>StreamReader</code> ja <code>StreamWriter</code> lihtsad ja tõhusad tööriistad.</p>

    <h3>StreamWriter näide</h3>
    <pre>
    <code>
using (StreamWriter writer = new StreamWriter("example.txt"))
{
    writer.WriteLine("Tere, maailm!");
}
        </code>
    </pre>

    <h3>StreamReader näide</h3>
    <pre>
    <code>
using (StreamReader reader = new StreamReader("example.txt"))
{
    string content = reader.ReadToEnd();
    Console.WriteLine(content);
}
        </code>
    </pre>

    <h2>Harjutused</h2>
    <ol>
        <li><strong>Faili loomine:</strong> Looge programm, mis kirjutab faili ja loeb selle sisu tagasi.</li>
        <li><strong>Ridade lugemine:</strong> Kirjutage programm, mis loeb failist iga rea ja kuvab need konsoolis.</li>
        <li><strong>Binäärfail:</strong> Looge programm, mis kirjutab ja loeb binäärandmeid, nagu numbrid ja stringid.</li>
        <li><strong>StreamReader ja StreamWriter:</strong> Kasutage neid klasside, et salvestada ja lugeda tekstifailist kasutaja sisend.</li>
    </ol>

    <h2>Kokkuvõte</h2>
    <p>Selles peatükis õppisime tundma failide ja voogude kasutamist C#-is. Need tööriistad on olulised, et hallata väliseid andmeid ja ressursse, näiteks tekstifaile või binäärfaile. Järgmises peatükis tutvume asünkroonse programmeerimisega.</p>

    @if (Codie.Controllers.BookController.PreviosPage != "404")
    {
        <input type="button" value="Previos" onclick="window.location.href='@Codie.Controllers.BookController.PreviosPage'" />
    }
    @if (Codie.Controllers.BookController.NextPage != "404")
    {
        <input type="button" value="Next" onclick="window.location.href='@Codie.Controllers.BookController.NextPage'" />
    }
</body>
</html>
